///--------------------------------------------------------NODE JS--------------------------------------------------------------
/*
* NODE JS is a server side JS framework which act as a runtime environment to run JS in server side(backend).
* It is used for creating server side and networking web applicatins.
*                                     NODE JS = RUNTIME ENVIRONMENT + JS LIBRARY

*------------------------Important features--------------------------
* Extremely fast
* Single threaded
* No buffering
* Asynchrounous & Event driven architecture
* Non blocking
*/

//---------------------Different parts of NODE JS--------------------
/*
* Modules
* Buffer
* Streaming
* DNS
* Domain
* Global
* Debugger
* Console
* Cluster
* ADD - ons
* Callback
* Crypto
* Net
* Error handling
*/

//-------------------------------------------------MODULES-------------------------------------------------
/* Modules are like JS libraries that contains a set of functions , you can include it in your application.

*  Types of modules :
        1. Core modules: inbuilt modules
          *http - creating http server and data transfer using HTTP protocol.
          *https - creating http server and data transfer using secure HTTP protocol.
          *url - used for url parsing
          *fs - used to handle file system(read file,write file,update file,delete file)
          *path - includes methods to deal with file paths
          *os - provides information about operating systems.
          *process

        2.Local modules: user defined modules, we can create & import it anywhere inside our application.

        3.Third party modules : these modules are available online using Node package manager(NPM). 
          *npm install express
          *npm install mongoose

* require() --> used for including modules inside your application.
                      eg : let http = require('http');
*/


//---------------------------------------------------FS MODULE-----------------------------------------------

/*
*to include fs module in the application, use
                             let fs = require('fs');

* Common use of file systems include :
             *Read file
             *Write file
             *Update file
             *Delete file
             *Rename file
*/

//--------------writing files(create)-----------------

   /*Syntax:  
   *fs.writeFileSync('file name','content');   (or)
   *fs.writeFile('file name','content');

   *difference between write file and write file sync:
           1.write file - asynchronous function (3 arguments can be passed)
           fs.writefile(filename , content , callback(err){})

           2.writ file sync - synchrounous function (2 arguments alone can be passed)
           fs.writefileSync(filename , content)

   */

const fs=require('fs');
fs.writeFileSync('hello.txt','hello');

//---------------reading files ------------------------

// we can read files using two methods : readFile() , readFileSync()

//readFileSync() :

try {
  const data = fs.readFileSync('hello.txt');
  console.log(data);
} catch (err) {
  console.error(err);
}

//readFile():

fs.readFile('hello.txt', (err, data) => {
  if (err) {
    console.error(err);
    return;
  }
  console.log(data);
});


//-----------------------------------------------------------HTTP MODULE------------------------------------------------------
//creating http server and data transfer using HTTP protocol.
/* to include fs module in the application, use
                             let http = require('http');  */
//----------------------creating http server-------------------
// to create http server , createServer() method is used.

 let http = require('http');
 let server = http.createServer((req,res)=>{
    console.log(req);  //since we didnt give any response the page  keeps on loading(no error occurs)
    process.exit(); //used to end the process (stops loading) 
 });
 server.listen(8000); //when this port gets accessed, the function will be executed.

//--------------------Creating http server and providing response for request------

server = http.createServer((req,res)=>{
    res.setHeader('content-type','text/html'); //sets the value of the HTTP header for the curent response
    res.write('<html><body><h1>WELCOME</h1></body></html>');  //Displaying content can be given here . we can also give as res.write('welcome');
    res.end(); //ends the response process. if we didnt give end, the page content will be displayed but keeps on loading.
})

//Note : after successful response , the status code of the response page will be '200 OK'.


//-------------------Sending response for particular URL---------------
// Note : to take the requested url , we can use req.url  method 

server = http.createServer((req,res)=>{
    const url = req.url;
    if(url=='/') //when client request this url page , the following response will be given back.
    {
        res.write('hello');
        res.end();
    }
    if(url=='/msg') //when client request this url page , the following response will be given back.
    {
        res.write('message url');
        res.end();
    }
})

//-----------------routing request and redirecting------------
//to redirect a request , we use the following syntax:
//                      res.setHeader('Location' , 'url')


server = http.createServer((req,res)=>{
    const url = req.url;
    if(url=='/') //when client request this url page , the following response will be given back.
    {
        res.write('hello');
        res.end();
    }
    if(url=='/msg') //when client request this url page , the following response will be given back.
    {
        res.setHeader('Location' , '/') //redirecting to '/' url
        res.statusCode = 302; ///sinc we are redirecting , we set the status code as 302
        res.end();
    }
})

//Node : the redirected url request info  has the status code 302
//       the status code of the response info will be 200

//-----------------------------------------------------------STREAMS & BUFFERS-------------------------------------------------------

/**
 * STREAMS:
 
 * in node JS , Datas are sent and passed as small chunks. this is called streams

  TYPES OF STREAMS :
 * Readstream - to read the streaming data eg(createReadStream method)
 * write stream - to create the stream of data for writing
 * Duplex streams - to create a stream that is both readable and writable
 * Transform streams - to create a stream that is both readable and writable but data can be modified while reading and writing to the stream
 
 * BUFFERS :

 *Buffer is a temperory memory that a stream takes to hold some data until it is consumed.
 */
//---------------------------------------------Sending html files as response(ReadStream method)------------------------------------------------------

//Html files can be sent using --> fs.stat() method
let fs = require('fs');
 server = http.createServer((req,res)=>{
    const url = req.url;
    if(url=='/') //when client request this url page , the following response will be given back.
    {
        fs.stat('./index.html' , (err,data) =>{
            if(data)
            {
                res.statusCode=200;
                res.setHeader('content-type' , 'text/html');
                res.createReadStream('index.html').pipe(res);
            }
        })
       
    }
})

//------------------------------writestream method---------------------
let fs = require('fs');
let writer=fs.createWriteStream('hello.txt');
writer.write('hello world'); //this data will be written on hello.txt file

//we can also give like this:
 writer = fs.createWriteStream('hello.txt').write('hello world');

//-----------------------------------------------------------EVENT EMITTERS---------------------------------------------------------
//Event emitter is a class which is used to handle and trigger events.
// to use event emitters, include 'events' module.

const EventEmitter = require('events');
const eventEmitter = new EventEmitter(); //object is created for event emitter class.

//main methods of event emitter:
 
// 1. on - used to add a callback function thats going to be executed when the event is triggered

     eventEmitter.on('start',()=>{ //start is not a inbuilt event ,  we are creating a event
        console.log('started');
     })
 //2. emit - used to trigger an event

    eventEmitter.emit('start'); //start event is triggered and hence the following callback will be executed.


//--------------------------------------------Reading data from forms and handling POST requests--------------------------------------
function requestHandler(req,res)
{
    
        const url=req.url;
        const method=req.method;
        //routing requests
        if(url==='/') //this is the index page displaying form 
        {
            res.setHeader('content-type','text/html');
            res.write('<html>');
            res.write('<head><title>hello</title></head>');
            res.write('<body><form action="/message" method="POST"> <input type="text"><input type="submit" value="send"></form></body>');
            res.write('</html>');
            return res.end();
        }
        //when the form is submitted , reading the data . req.on() method binds the data to object. It is a way to express when there is something happening, it executes the function added as a parameter.
        if(url==='/message' && method =='POST') 
        {
            //reading data from response
            const body=[];
            req.on('data',(chunk)=>{  //if data is passed in request, pushes all the data chunks(hex decimal value) in an array
                body.push(chunk)
            })
            req.on('end',()=>{  //when the requests sends the data fully , end event occurs. if end event occurs, concating the array and converting into string
                const parsedBody=Buffer.concat(body).toString();
                console.log(parsedBody); //input values will be displayed.
            })
            //redirecting code
            res.setHeader('Location','/');
            res.statusCode = 302;
            return res.end(); //by giving the return statement the below code will not be executed. the process ends.
        }
        // Note : if we didnt use return statement , below code also gets executed. 
        //if the requested url didnt match the above if condition urls , the below code will be executed.
            res.setHeader('content-type','text/html');
            res.write('<html>');
            res.write('<head><title>hello</title></head>');
            res.write('<body><h1>routing requests</h1></body>');
            res.write('</html>');
            return res.end();
        
    
};


//---------------------------------------------------------------exporting modules----------------------------------------

//to export a user defined functions(module) , use 'module.exports = function'
module.exports = requestHandler;
//to export more than 1 property use module.exports = {func1,func2,....};
//to import , import using obj.property
let imp = require('./foldername');
let func1 = imp.func1();///--------------------------------------------------------NODE JS--------------------------------------------------------------
/*
* NODE JS is a server side JS framework which act as a runtime environment to run JS in server side(backend).
* It is used for creating server side and networking web applicatins.
*                                     NODE JS = RUNTIME ENVIRONMENT + JS LIBRARY

*------------------------Important features--------------------------
* Extremely fast
* Single threaded
* No buffering
* Asynchrounous & Event driven architecture
* Non blocking
*/

//---------------------Different parts of NODE JS--------------------
/*
* Modules
* Buffer
* Streaming
* DNS
* Domain
* Global
* Debugger
* Console
* Cluster
* ADD - ons
* Callback
* Crypto
* Net
* Error handling
*/

//-------------------------------------------------MODULES-------------------------------------------------
/* Modules are like JS libraries that contains a set of functions , you can include it in your application.

*  Types of modules :
        1. Core modules: inbuilt modules
          *http - creating http server and data transfer using HTTP protocol.
          *https - creating http server and data transfer using secure HTTP protocol.
          *url - used for url parsing
          *fs - used to handle file system(read file,write file,update file,delete file)
          *path - includes methods to deal with file paths
          *os - provides information about operating systems.
          *process

        2.Local modules: user defined modules, we can create & import it anywhere inside our application.

        3.Third party modules : these modules are available online using Node package manager(NPM). 
          *npm install express
          *npm install mongoose

* require() --> used for including modules inside your application.
                      eg : let http = require('http');
*/


//---------------------------------------------------FS MODULE-----------------------------------------------

/*
*to include fs module in the application, use
                             let fs = require('fs');

* Common use of file systems include :
             *Read file
             *Write file
             *Update file
             *Delete file
             *Rename file
*/

//--------------writing files(create)-----------------

   /*Syntax:  
   *fs.writeFileSync('file name','content');   (or)
   *fs.writeFile('file name','content');

   *difference between write file and write file sync:
           1.write file - asynchronous function (3 arguments can be passed)
           fs.writefile(filename , content , callback(err){})

           2.writ file sync - synchrounous function (2 arguments alone can be passed)
           fs.writefileSync(filename , content)

   */

const fs=require('fs');
fs.writeFileSync('hello.txt','hello');

//---------------reading files ------------------------

// we can read files using two methods : readFile() , readFileSync()

//readFileSync() :

try {
  const data = fs.readFileSync('hello.txt');
  console.log(data);
} catch (err) {
  console.error(err);
}

//readFile():

fs.readFile('hello.txt', (err, data) => {
  if (err) {
    console.error(err);
    return;
  }
  console.log(data);
});


//-----------------------------------------------------------HTTP MODULE------------------------------------------------------
//creating http server and data transfer using HTTP protocol.
/* to include fs module in the application, use
                             let http = require('http');  */
//----------------------creating http server-------------------
// to create http server , createServer() method is used.

 let http = require('http');
 let server = http.createServer((req,res)=>{
    console.log(req);  //since we didnt give any response the page  keeps on loading(no error occurs)
    process.exit(); //used to end the process (stops loading) 
 });
 server.listen(8000); //when this port gets accessed, the function will be executed.

//--------------------Creating http server and providing response for request------

server = http.createServer((req,res)=>{
    res.setHeader('content-type','text/html'); //sets the value of the HTTP header for the curent response
    res.write('<html><body><h1>WELCOME</h1></body></html>');  //Displaying content can be given here . we can also give as res.write('welcome');
    res.end(); //ends the response process. if we didnt give end, the page content will be displayed but keeps on loading.
})

//Note : after successful response , the status code of the response page will be '200 OK'.


//-------------------Sending response for particular URL---------------
// Note : to take the requested url , we can use req.url  method 

server = http.createServer((req,res)=>{
    const url = req.url;
    if(url=='/') //when client request this url page , the following response will be given back.
    {
        res.write('hello');
        res.end();
    }
    if(url=='/msg') //when client request this url page , the following response will be given back.
    {
        res.write('message url');
        res.end();
    }
})

//-----------------routing request and redirecting------------
//to redirect a request , we use the following syntax:
//                      res.setHeader('Location' , 'url')


server = http.createServer((req,res)=>{
    const url = req.url;
    if(url=='/') //when client request this url page , the following response will be given back.
    {
        res.write('hello');
        res.end();
    }
    if(url=='/msg') //when client request this url page , the following response will be given back.
    {
        res.setHeader('Location' , '/') //redirecting to '/' url
        res.statusCode = 302; ///sinc we are redirecting , we set the status code as 302
        res.end();
    }
})

//Node : the redirected url request info  has the status code 302
//       the status code of the response info will be 200

//-----------------------------------------------------------STREAMS & BUFFERS-------------------------------------------------------

/**
 * STREAMS:
 
 * in node JS , Datas are sent and passed as small chunks. this is called streams

  TYPES OF STREAMS :
 * Readstream - to read the streaming data eg(createReadStream method)
 * write stream - to create the stream of data for writing
 * Duplex streams - to create a stream that is both readable and writable
 * Transform streams - to create a stream that is both readable and writable but data can be modified while reading and writing to the stream
 
 * BUFFERS :

 *Buffer is a temperory memory that a stream takes to hold some data until it is consumed.
 */
//---------------------------------------------Sending html files as response(ReadStream method)------------------------------------------------------

//Html files can be sent using --> fs.stat() method
let fs = require('fs');
 server = http.createServer((req,res)=>{
    const url = req.url;
    if(url=='/') //when client request this url page , the following response will be given back.
    {
        fs.stat('./index.html' , (err,data) =>{
            if(data)
            {
                res.statusCode=200;
                res.setHeader('content-type' , 'text/html');
                res.createReadStream('index.html').pipe(res);
            }
        })
       
    }
})

//------------------------------writestream method---------------------
let fs = require('fs');
let writer=fs.createWriteStream('hello.txt');
writer.write('hello world'); //this data will be written on hello.txt file

//we can also give like this:
 writer = fs.createWriteStream('hello.txt').write('hello world');

//-----------------------------------------------------------EVENT EMITTERS---------------------------------------------------------
//Event emitter is a class which is used to handle and trigger events.
// to use event emitters, include 'events' module.

const EventEmitter = require('events');
const eventEmitter = new EventEmitter(); //object is created for event emitter class.

//main methods of event emitter:
 
// 1. on - used to add a callback function thats going to be executed when the event is triggered

     eventEmitter.on('start',()=>{ //start is not a inbuilt event ,  we are creating a event
        console.log('started');
     })
 //2. emit - used to trigger an event

    eventEmitter.emit('start'); //start event is triggered and hence the following callback will be executed.


//--------------------------------------------Reading data from forms and handling POST requests--------------------------------------
function requestHandler(req,res)
{
    
        const url=req.url;
        const method=req.method;
        //routing requests
        if(url==='/') //this is the index page displaying form 
        {
            res.setHeader('content-type','text/html');
            res.write('<html>');
            res.write('<head><title>hello</title></head>');
            res.write('<body><form action="/message" method="POST"> <input type="text"><input type="submit" value="send"></form></body>');
            res.write('</html>');
            return res.end();
        }
        //when the form is submitted , reading the data . req.on() method binds the data to object. It is a way to express when there is something happening, it executes the function added as a parameter.
        if(url==='/message' && method =='POST') 
        {
            //reading data from response
            const body=[];
            req.on('data',(chunk)=>{  //if data is passed in request, pushes all the data chunks(hex decimal value) in an array
                body.push(chunk)
            })
            req.on('end',()=>{  //when the requests sends the data fully , end event occurs. if end event occurs, concating the array and converting into string
                const parsedBody=Buffer.concat(body).toString();
                console.log(parsedBody); //input values will be displayed.
            })
            //redirecting code
            res.setHeader('Location','/');
            res.statusCode = 302;
            return res.end(); //by giving the return statement the below code will not be executed. the process ends.
        }
        // Note : if we didnt use return statement , below code also gets executed. 
        //if the requested url didnt match the above if condition urls , the below code will be executed.
            res.setHeader('content-type','text/html');
            res.write('<html>');
            res.write('<head><title>hello</title></head>');
            res.write('<body><h1>routing requests</h1></body>');
            res.write('</html>');
            return res.end();
        
    
};


//---------------------------------------------------------------exporting modules----------------------------------------

//to export a user defined functions(module) , use 'module.exports = function'
module.exports = requestHandler;
//to export more than 1 property use module.exports = {func1,func2,....};
//to import , import using obj.property
let imp = require('./foldername');
let func1 = imp.func1();///--------------------------------------------------------NODE JS--------------------------------------------------------------
/*
* NODE JS is a server side JS framework which act as a runtime environment to run JS in server side(backend).
* It is used for creating server side and networking web applicatins.
*                                     NODE JS = RUNTIME ENVIRONMENT + JS LIBRARY

*------------------------Important features--------------------------
* Extremely fast
* Single threaded
* No buffering
* Asynchrounous & Event driven architecture
* Non blocking
*/

//---------------------Different parts of NODE JS--------------------
/*
* Modules
* Buffer
* Streaming
* DNS
* Domain
* Global
* Debugger
* Console
* Cluster
* ADD - ons
* Callback
* Crypto
* Net
* Error handling
*/

//-------------------------------------------------MODULES-------------------------------------------------
/* Modules are like JS libraries that contains a set of functions , you can include it in your application.

*  Types of modules :
        1. Core modules: inbuilt modules
          *http - creating http server and data transfer using HTTP protocol.
          *https - creating http server and data transfer using secure HTTP protocol.
          *url - used for url parsing
          *fs - used to handle file system(read file,write file,update file,delete file)
          *path - includes methods to deal with file paths
          *os - provides information about operating systems.
          *process

        2.Local modules: user defined modules, we can create & import it anywhere inside our application.

        3.Third party modules : these modules are available online using Node package manager(NPM). 
          *npm install express
          *npm install mongoose

* require() --> used for including modules inside your application.
                      eg : let http = require('http');
*/


//---------------------------------------------------FS MODULE-----------------------------------------------

/*
*to include fs module in the application, use
                             let fs = require('fs');

* Common use of file systems include :
             *Read file
             *Write file
             *Update file
             *Delete file
             *Rename file
*/

//--------------writing files(create)-----------------

   /*Syntax:  
   *fs.writeFileSync('file name','content');   (or)
   *fs.writeFile('file name','content');

   *difference between write file and write file sync:
           1.write file - asynchronous function (3 arguments can be passed)
           fs.writefile(filename , content , callback(err){})

           2.writ file sync - synchrounous function (2 arguments alone can be passed)
           fs.writefileSync(filename , content)

   */

const fs=require('fs');
fs.writeFileSync('hello.txt','hello');

//---------------reading files ------------------------

// we can read files using two methods : readFile() , readFileSync()

//readFileSync() :

try {
  const data = fs.readFileSync('hello.txt');
  console.log(data);
} catch (err) {
  console.error(err);
}

//readFile():

fs.readFile('hello.txt', (err, data) => {
  if (err) {
    console.error(err);
    return;
  }
  console.log(data);
});


//-----------------------------------------------------------HTTP MODULE------------------------------------------------------
//creating http server and data transfer using HTTP protocol.
/* to include fs module in the application, use
                             let http = require('http');  */
//----------------------creating http server-------------------
// to create http server , createServer() method is used.

 let http = require('http');
 let server = http.createServer((req,res)=>{
    console.log(req);  //since we didnt give any response the page  keeps on loading(no error occurs)
    process.exit(); //used to end the process (stops loading) 
 });
 server.listen(8000); //when this port gets accessed, the function will be executed.

//--------------------Creating http server and providing response for request------

server = http.createServer((req,res)=>{
    res.setHeader('content-type','text/html'); //sets the value of the HTTP header for the curent response
    res.write('<html><body><h1>WELCOME</h1></body></html>');  //Displaying content can be given here . we can also give as res.write('welcome');
    res.end(); //ends the response process. if we didnt give end, the page content will be displayed but keeps on loading.
})

//Note : after successful response , the status code of the response page will be '200 OK'.


//-------------------Sending response for particular URL---------------
// Note : to take the requested url , we can use req.url  method 

server = http.createServer((req,res)=>{
    const url = req.url;
    if(url=='/') //when client request this url page , the following response will be given back.
    {
        res.write('hello');
        res.end();
    }
    if(url=='/msg') //when client request this url page , the following response will be given back.
    {
        res.write('message url');
        res.end();
    }
})

//-----------------routing request and redirecting------------
//to redirect a request , we use the following syntax:
//                      res.setHeader('Location' , 'url')


server = http.createServer((req,res)=>{
    const url = req.url;
    if(url=='/') //when client request this url page , the following response will be given back.
    {
        res.write('hello');
        res.end();
    }
    if(url=='/msg') //when client request this url page , the following response will be given back.
    {
        res.setHeader('Location' , '/') //redirecting to '/' url
        res.statusCode = 302; ///sinc we are redirecting , we set the status code as 302
        res.end();
    }
})

//Node : the redirected url request info  has the status code 302
//       the status code of the response info will be 200

//-----------------------------------------------------------STREAMS & BUFFERS-------------------------------------------------------

/**
 * STREAMS:
 
 * in node JS , Datas are sent and passed as small chunks. this is called streams

  TYPES OF STREAMS :
 * Readstream - to read the streaming data eg(createReadStream method)
 * write stream - to create the stream of data for writing
 * Duplex streams - to create a stream that is both readable and writable
 * Transform streams - to create a stream that is both readable and writable but data can be modified while reading and writing to the stream
 
 * BUFFERS :

 *Buffer is a temperory memory that a stream takes to hold some data until it is consumed.
 */
//---------------------------------------------Sending html files as response(ReadStream method)------------------------------------------------------

//Html files can be sent using --> fs.stat() method
let fs = require('fs');
 server = http.createServer((req,res)=>{
    const url = req.url;
    if(url=='/') //when client request this url page , the following response will be given back.
    {
        fs.stat('./index.html' , (err,data) =>{
            if(data)
            {
                res.statusCode=200;
                res.setHeader('content-type' , 'text/html');
                res.createReadStream('index.html').pipe(res);
            }
        })
       
    }
})

//------------------------------writestream method---------------------
let fs = require('fs');
let writer=fs.createWriteStream('hello.txt');
writer.write('hello world'); //this data will be written on hello.txt file

//we can also give like this:
 writer = fs.createWriteStream('hello.txt').write('hello world');

//-----------------------------------------------------------EVENT EMITTERS---------------------------------------------------------
//Event emitter is a class which is used to handle and trigger events.
// to use event emitters, include 'events' module.

const EventEmitter = require('events');
const eventEmitter = new EventEmitter(); //object is created for event emitter class.

//main methods of event emitter:
 
// 1. on - used to add a callback function thats going to be executed when the event is triggered

     eventEmitter.on('start',()=>{ //start is not a inbuilt event ,  we are creating a event
        console.log('started');
     })
 //2. emit - used to trigger an event

    eventEmitter.emit('start'); //start event is triggered and hence the following callback will be executed.


//--------------------------------------------Reading data from forms and handling POST requests--------------------------------------
function requestHandler(req,res)
{
    
        const url=req.url;
        const method=req.method;
        //routing requests
        if(url==='/') //this is the index page displaying form 
        {
            res.setHeader('content-type','text/html');
            res.write('<html>');
            res.write('<head><title>hello</title></head>');
            res.write('<body><form action="/message" method="POST"> <input type="text"><input type="submit" value="send"></form></body>');
            res.write('</html>');
            return res.end();
        }
        //when the form is submitted , reading the data . req.on() method binds the data to object. It is a way to express when there is something happening, it executes the function added as a parameter.
        if(url==='/message' && method =='POST') 
        {
            //reading data from response
            const body=[];
            req.on('data',(chunk)=>{  //if data is passed in request, pushes all the data chunks(hex decimal value) in an array
                body.push(chunk)
            })
            req.on('end',()=>{  //when the requests sends the data fully , end event occurs. if end event occurs, concating the array and converting into string
                const parsedBody=Buffer.concat(body).toString();
                console.log(parsedBody); //input values will be displayed.
            })
            //redirecting code
            res.setHeader('Location','/');
            res.statusCode = 302;
            return res.end(); //by giving the return statement the below code will not be executed. the process ends.
        }
        // Note : if we didnt use return statement , below code also gets executed. 
        //if the requested url didnt match the above if condition urls , the below code will be executed.
            res.setHeader('content-type','text/html');
            res.write('<html>');
            res.write('<head><title>hello</title></head>');
            res.write('<body><h1>routing requests</h1></body>');
            res.write('</html>');
            return res.end();
        
    
};


//---------------------------------------------------------------exporting modules----------------------------------------

//to export a user defined functions(module) , use 'module.exports = function'
module.exports = requestHandler;
//to export more than 1 property use module.exports = {func1,func2,....};
//to import , import using obj.property
let imp = require('./foldername');
let func1 = imp.func1();///--------------------------------------------------------NODE JS--------------------------------------------------------------
/*
* NODE JS is a server side JS framework which act as a runtime environment to run JS in server side(backend).
* It is used for creating server side and networking web applicatins.
*                                     NODE JS = RUNTIME ENVIRONMENT + JS LIBRARY

*------------------------Important features--------------------------
* Extremely fast
* Single threaded
* No buffering
* Asynchrounous & Event driven architecture
* Non blocking
*/

//---------------------Different parts of NODE JS--------------------
/*
* Modules
* Buffer
* Streaming
* DNS
* Domain
* Global
* Debugger
* Console
* Cluster
* ADD - ons
* Callback
* Crypto
* Net
* Error handling
*/

//-------------------------------------------------MODULES-------------------------------------------------
/* Modules are like JS libraries that contains a set of functions , you can include it in your application.

*  Types of modules :
        1. Core modules: inbuilt modules
          *http - creating http server and data transfer using HTTP protocol.
          *https - creating http server and data transfer using secure HTTP protocol.
          *url - used for url parsing
          *fs - used to handle file system(read file,write file,update file,delete file)
          *path - includes methods to deal with file paths
          *os - provides information about operating systems.
          *process

        2.Local modules: user defined modules, we can create & import it anywhere inside our application.

        3.Third party modules : these modules are available online using Node package manager(NPM). 
          *npm install express
          *npm install mongoose

* require() --> used for including modules inside your application.
                      eg : let http = require('http');
*/


//---------------------------------------------------FS MODULE-----------------------------------------------

/*
*to include fs module in the application, use
                             let fs = require('fs');

* Common use of file systems include :
             *Read file
             *Write file
             *Update file
             *Delete file
             *Rename file
*/

//--------------writing files(create)-----------------

   /*Syntax:  
   *fs.writeFileSync('file name','content');   (or)
   *fs.writeFile('file name','content');

   *difference between write file and write file sync:
           1.write file - asynchronous function (3 arguments can be passed)
           fs.writefile(filename , content , callback(err){})

           2.writ file sync - synchrounous function (2 arguments alone can be passed)
           fs.writefileSync(filename , content)

   */

const fs=require('fs');
fs.writeFileSync('hello.txt','hello');

//---------------reading files ------------------------

// we can read files using two methods : readFile() , readFileSync()

//readFileSync() :

try {
  const data = fs.readFileSync('hello.txt');
  console.log(data);
} catch (err) {
  console.error(err);
}

//readFile():

fs.readFile('hello.txt', (err, data) => {
  if (err) {
    console.error(err);
    return;
  }
  console.log(data);
});


//-----------------------------------------------------------HTTP MODULE------------------------------------------------------
//creating http server and data transfer using HTTP protocol.
/* to include fs module in the application, use
                             let http = require('http');  */
//----------------------creating http server-------------------
// to create http server , createServer() method is used.

 let http = require('http');
 let server = http.createServer((req,res)=>{
    console.log(req);  //since we didnt give any response the page  keeps on loading(no error occurs)
    process.exit(); //used to end the process (stops loading) 
 });
 server.listen(8000); //when this port gets accessed, the function will be executed.

//--------------------Creating http server and providing response for request------

server = http.createServer((req,res)=>{
    res.setHeader('content-type','text/html'); //sets the value of the HTTP header for the curent response
    res.write('<html><body><h1>WELCOME</h1></body></html>');  //Displaying content can be given here . we can also give as res.write('welcome');
    res.end(); //ends the response process. if we didnt give end, the page content will be displayed but keeps on loading.
})

//Note : after successful response , the status code of the response page will be '200 OK'.


//-------------------Sending response for particular URL---------------
// Note : to take the requested url , we can use req.url  method 

server = http.createServer((req,res)=>{
    const url = req.url;
    if(url=='/') //when client request this url page , the following response will be given back.
    {
        res.write('hello');
        res.end();
    }
    if(url=='/msg') //when client request this url page , the following response will be given back.
    {
        res.write('message url');
        res.end();
    }
})

//-----------------routing request and redirecting------------
//to redirect a request , we use the following syntax:
//                      res.setHeader('Location' , 'url')


server = http.createServer((req,res)=>{
    const url = req.url;
    if(url=='/') //when client request this url page , the following response will be given back.
    {
        res.write('hello');
        res.end();
    }
    if(url=='/msg') //when client request this url page , the following response will be given back.
    {
        res.setHeader('Location' , '/') //redirecting to '/' url
        res.statusCode = 302; ///sinc we are redirecting , we set the status code as 302
        res.end();
    }
})

//Node : the redirected url request info  has the status code 302
//       the status code of the response info will be 200

//-----------------------------------------------------------STREAMS & BUFFERS-------------------------------------------------------

/**
 * STREAMS:
 
 * in node JS , Datas are sent and passed as small chunks. this is called streams

  TYPES OF STREAMS :
 * Readstream - to read the streaming data eg(createReadStream method)
 * write stream - to create the stream of data for writing
 * Duplex streams - to create a stream that is both readable and writable
 * Transform streams - to create a stream that is both readable and writable but data can be modified while reading and writing to the stream
 
 * BUFFERS :

 *Buffer is a temperory memory that a stream takes to hold some data until it is consumed.
 */
//---------------------------------------------Sending html files as response(ReadStream method)------------------------------------------------------

//Html files can be sent using --> fs.stat() method
let fs = require('fs');
 server = http.createServer((req,res)=>{
    const url = req.url;
    if(url=='/') //when client request this url page , the following response will be given back.
    {
        fs.stat('./index.html' , (err,data) =>{
            if(data)
            {
                res.statusCode=200;
                res.setHeader('content-type' , 'text/html');
                res.createReadStream('index.html').pipe(res);
            }
        })
       
    }
})

//------------------------------writestream method---------------------
let fs = require('fs');
let writer=fs.createWriteStream('hello.txt');
writer.write('hello world'); //this data will be written on hello.txt file

//we can also give like this:
 writer = fs.createWriteStream('hello.txt').write('hello world');

//-----------------------------------------------------------EVENT EMITTERS---------------------------------------------------------
//Event emitter is a class which is used to handle and trigger events.
// to use event emitters, include 'events' module.

const EventEmitter = require('events');
const eventEmitter = new EventEmitter(); //object is created for event emitter class.

//main methods of event emitter:
 
// 1. on - used to add a callback function thats going to be executed when the event is triggered

     eventEmitter.on('start',()=>{ //start is not a inbuilt event ,  we are creating a event
        console.log('started');
     })
 //2. emit - used to trigger an event

    eventEmitter.emit('start'); //start event is triggered and hence the following callback will be executed.


//--------------------------------------------Reading data from forms and handling POST requests--------------------------------------
function requestHandler(req,res)
{
    
        const url=req.url;
        const method=req.method;
        //routing requests
        if(url==='/') //this is the index page displaying form 
        {
            res.setHeader('content-type','text/html');
            res.write('<html>');
            res.write('<head><title>hello</title></head>');
            res.write('<body><form action="/message" method="POST"> <input type="text"><input type="submit" value="send"></form></body>');
            res.write('</html>');
            return res.end();
        }
        //when the form is submitted , reading the data . req.on() method binds the data to object. It is a way to express when there is something happening, it executes the function added as a parameter.
        if(url==='/message' && method =='POST') 
        {
            //reading data from response
            const body=[];
            req.on('data',(chunk)=>{  //if data is passed in request, pushes all the data chunks(hex decimal value) in an array
                body.push(chunk)
            })
            req.on('end',()=>{  //when the requests sends the data fully , end event occurs. if end event occurs, concating the array and converting into string
                const parsedBody=Buffer.concat(body).toString();
                console.log(parsedBody); //input values will be displayed.
            })
            //redirecting code
            res.setHeader('Location','/');
            res.statusCode = 302;
            return res.end(); //by giving the return statement the below code will not be executed. the process ends.
        }
        // Note : if we didnt use return statement , below code also gets executed. 
        //if the requested url didnt match the above if condition urls , the below code will be executed.
            res.setHeader('content-type','text/html');
            res.write('<html>');
            res.write('<head><title>hello</title></head>');
            res.write('<body><h1>routing requests</h1></body>');
            res.write('</html>');
            return res.end();
        
    
};


//---------------------------------------------------------------exporting modules----------------------------------------

//to export a user defined functions(module) , use 'module.exports = function'
module.exports = requestHandler;
//to export more than 1 property use module.exports = {func1,func2,....};
//to import , import using obj.property
let imp = require('./foldername');
let func1 = imp.func1();///--------------------------------------------------------NODE JS--------------------------------------------------------------
/*
* NODE JS is a server side JS framework which act as a runtime environment to run JS in server side(backend).
* It is used for creating server side and networking web applicatins.
*                                     NODE JS = RUNTIME ENVIRONMENT + JS LIBRARY

*------------------------Important features--------------------------
* Extremely fast
* Single threaded
* No buffering
* Asynchrounous & Event driven architecture
* Non blocking
*/

//---------------------Different parts of NODE JS--------------------
/*
* Modules
* Buffer
* Streaming
* DNS
* Domain
* Global
* Debugger
* Console
* Cluster
* ADD - ons
* Callback
* Crypto
* Net
* Error handling
*/

//-------------------------------------------------MODULES-------------------------------------------------
/* Modules are like JS libraries that contains a set of functions , you can include it in your application.

*  Types of modules :
        1. Core modules: inbuilt modules
          *http - creating http server and data transfer using HTTP protocol.
          *https - creating http server and data transfer using secure HTTP protocol.
          *url - used for url parsing
          *fs - used to handle file system(read file,write file,update file,delete file)
          *path - includes methods to deal with file paths
          *os - provides information about operating systems.
          *process

        2.Local modules: user defined modules, we can create & import it anywhere inside our application.

        3.Third party modules : these modules are available online using Node package manager(NPM). 
          *npm install express
          *npm install mongoose

* require() --> used for including modules inside your application.
                      eg : let http = require('http');
*/


//---------------------------------------------------FS MODULE-----------------------------------------------

/*
*to include fs module in the application, use
                             let fs = require('fs');

* Common use of file systems include :
             *Read file
             *Write file
             *Update file
             *Delete file
             *Rename file
*/

//--------------writing files(create)-----------------

   /*Syntax:  
   *fs.writeFileSync('file name','content');   (or)
   *fs.writeFile('file name','content');

   *difference between write file and write file sync:
           1.write file - asynchronous function (3 arguments can be passed)
           fs.writefile(filename , content , callback(err){})

           2.writ file sync - synchrounous function (2 arguments alone can be passed)
           fs.writefileSync(filename , content)

   */

const fs=require('fs');
fs.writeFileSync('hello.txt','hello');

//---------------reading files ------------------------

// we can read files using two methods : readFile() , readFileSync()

//readFileSync() :

try {
  const data = fs.readFileSync('hello.txt');
  console.log(data);
} catch (err) {
  console.error(err);
}

//readFile():

fs.readFile('hello.txt', (err, data) => {
  if (err) {
    console.error(err);
    return;
  }
  console.log(data);
});


//-----------------------------------------------------------HTTP MODULE------------------------------------------------------
//creating http server and data transfer using HTTP protocol.
/* to include fs module in the application, use
                             let http = require('http');  */
//----------------------creating http server-------------------
// to create http server , createServer() method is used.

 let http = require('http');
 let server = http.createServer((req,res)=>{
    console.log(req);  //since we didnt give any response the page  keeps on loading(no error occurs)
    process.exit(); //used to end the process (stops loading) 
 });
 server.listen(8000); //when this port gets accessed, the function will be executed.

//--------------------Creating http server and providing response for request------

server = http.createServer((req,res)=>{
    res.setHeader('content-type','text/html'); //sets the value of the HTTP header for the curent response
    res.write('<html><body><h1>WELCOME</h1></body></html>');  //Displaying content can be given here . we can also give as res.write('welcome');
    res.end(); //ends the response process. if we didnt give end, the page content will be displayed but keeps on loading.
})

//Note : after successful response , the status code of the response page will be '200 OK'.


//-------------------Sending response for particular URL---------------
// Note : to take the requested url , we can use req.url  method 

server = http.createServer((req,res)=>{
    const url = req.url;
    if(url=='/') //when client request this url page , the following response will be given back.
    {
        res.write('hello');
        res.end();
    }
    if(url=='/msg') //when client request this url page , the following response will be given back.
    {
        res.write('message url');
        res.end();
    }
})

//-----------------routing request and redirecting------------
//to redirect a request , we use the following syntax:
//                      res.setHeader('Location' , 'url')


server = http.createServer((req,res)=>{
    const url = req.url;
    if(url=='/') //when client request this url page , the following response will be given back.
    {
        res.write('hello');
        res.end();
    }
    if(url=='/msg') //when client request this url page , the following response will be given back.
    {
        res.setHeader('Location' , '/') //redirecting to '/' url
        res.statusCode = 302; ///sinc we are redirecting , we set the status code as 302
        res.end();
    }
})

//Node : the redirected url request info  has the status code 302
//       the status code of the response info will be 200

//-----------------------------------------------------------STREAMS & BUFFERS-------------------------------------------------------

/**
 * STREAMS:
 
 * in node JS , Datas are sent and passed as small chunks. this is called streams

  TYPES OF STREAMS :
 * Readstream - to read the streaming data eg(createReadStream method)
 * write stream - to create the stream of data for writing
 * Duplex streams - to create a stream that is both readable and writable
 * Transform streams - to create a stream that is both readable and writable but data can be modified while reading and writing to the stream
 
 * BUFFERS :

 *Buffer is a temperory memory that a stream takes to hold some data until it is consumed.
 */
//---------------------------------------------Sending html files as response(ReadStream method)------------------------------------------------------

//Html files can be sent using --> fs.stat() method
let fs = require('fs');
 server = http.createServer((req,res)=>{
    const url = req.url;
    if(url=='/') //when client request this url page , the following response will be given back.
    {
        fs.stat('./index.html' , (err,data) =>{
            if(data)
            {
                res.statusCode=200;
                res.setHeader('content-type' , 'text/html');
                res.createReadStream('index.html').pipe(res);
            }
        })
       
    }
})

//------------------------------writestream method---------------------
let fs = require('fs');
let writer=fs.createWriteStream('hello.txt');
writer.write('hello world'); //this data will be written on hello.txt file

//we can also give like this:
 writer = fs.createWriteStream('hello.txt').write('hello world');

//-----------------------------------------------------------EVENT EMITTERS---------------------------------------------------------
//Event emitter is a class which is used to handle and trigger events.
// to use event emitters, include 'events' module.

const EventEmitter = require('events');
const eventEmitter = new EventEmitter(); //object is created for event emitter class.

//main methods of event emitter:
 
// 1. on - used to add a callback function thats going to be executed when the event is triggered

     eventEmitter.on('start',()=>{ //start is not a inbuilt event ,  we are creating a event
        console.log('started');
     })
 //2. emit - used to trigger an event

    eventEmitter.emit('start'); //start event is triggered and hence the following callback will be executed.


//--------------------------------------------Reading data from forms and handling POST requests--------------------------------------
function requestHandler(req,res)
{
    
        const url=req.url;
        const method=req.method;
        //routing requests
        if(url==='/') //this is the index page displaying form 
        {
            res.setHeader('content-type','text/html');
            res.write('<html>');
            res.write('<head><title>hello</title></head>');
            res.write('<body><form action="/message" method="POST"> <input type="text"><input type="submit" value="send"></form></body>');
            res.write('</html>');
            return res.end();
        }
        //when the form is submitted , reading the data . req.on() method binds the data to object. It is a way to express when there is something happening, it executes the function added as a parameter.
        if(url==='/message' && method =='POST') 
        {
            //reading data from response
            const body=[];
            req.on('data',(chunk)=>{  //if data is passed in request, pushes all the data chunks(hex decimal value) in an array
                body.push(chunk)
            })
            req.on('end',()=>{  //when the requests sends the data fully , end event occurs. if end event occurs, concating the array and converting into string
                const parsedBody=Buffer.concat(body).toString();
                console.log(parsedBody); //input values will be displayed.
            })
            //redirecting code
            res.setHeader('Location','/');
            res.statusCode = 302;
            return res.end(); //by giving the return statement the below code will not be executed. the process ends.
        }
        // Note : if we didnt use return statement , below code also gets executed. 
        //if the requested url didnt match the above if condition urls , the below code will be executed.
            res.setHeader('content-type','text/html');
            res.write('<html>');
            res.write('<head><title>hello</title></head>');
            res.write('<body><h1>routing requests</h1></body>');
            res.write('</html>');
            return res.end();
        
    
};


//---------------------------------------------------------------exporting modules----------------------------------------

//to export a user defined functions(module) , use 'module.exports = function'
module.exports = requestHandler;
//to export more than 1 property use module.exports = {func1,func2,....};
//to import , import using obj.property
let imp = require('./foldername');
let func1 = imp.func1();///--------------------------------------------------------NODE JS--------------------------------------------------------------
/*
* NODE JS is a server side JS framework which act as a runtime environment to run JS in server side(backend).
* It is used for creating server side and networking web applicatins.
*                                     NODE JS = RUNTIME ENVIRONMENT + JS LIBRARY

*------------------------Important features--------------------------
* Extremely fast
* Single threaded
* No buffering
* Asynchrounous & Event driven architecture
* Non blocking
*/

//---------------------Different parts of NODE JS--------------------
/*
* Modules
* Buffer
* Streaming
* DNS
* Domain
* Global
* Debugger
* Console
* Cluster
* ADD - ons
* Callback
* Crypto
* Net
* Error handling
*/

//-------------------------------------------------MODULES-------------------------------------------------
/* Modules are like JS libraries that contains a set of functions , you can include it in your application.

*  Types of modules :
        1. Core modules: inbuilt modules
          *http - creating http server and data transfer using HTTP protocol.
          *https - creating http server and data transfer using secure HTTP protocol.
          *url - used for url parsing
          *fs - used to handle file system(read file,write file,update file,delete file)
          *path - includes methods to deal with file paths
          *os - provides information about operating systems.
          *process

        2.Local modules: user defined modules, we can create & import it anywhere inside our application.

        3.Third party modules : these modules are available online using Node package manager(NPM). 
          *npm install express
          *npm install mongoose

* require() --> used for including modules inside your application.
                      eg : let http = require('http');
*/


//---------------------------------------------------FS MODULE-----------------------------------------------

/*
*to include fs module in the application, use
                             let fs = require('fs');

* Common use of file systems include :
             *Read file
             *Write file
             *Update file
             *Delete file
             *Rename file
*/

//--------------writing files(create)-----------------

   /*Syntax:  
   *fs.writeFileSync('file name','content');   (or)
   *fs.writeFile('file name','content');

   *difference between write file and write file sync:
           1.write file - asynchronous function (3 arguments can be passed)
           fs.writefile(filename , content , callback(err){})

           2.writ file sync - synchrounous function (2 arguments alone can be passed)
           fs.writefileSync(filename , content)

   */

const fs=require('fs');
fs.writeFileSync('hello.txt','hello');

//---------------reading files ------------------------

// we can read files using two methods : readFile() , readFileSync()

//readFileSync() :

try {
  const data = fs.readFileSync('hello.txt');
  console.log(data);
} catch (err) {
  console.error(err);
}

//readFile():

fs.readFile('hello.txt', (err, data) => {
  if (err) {
    console.error(err);
    return;
  }
  console.log(data);
});


//-----------------------------------------------------------HTTP MODULE------------------------------------------------------
//creating http server and data transfer using HTTP protocol.
/* to include fs module in the application, use
                             let http = require('http');  */
//----------------------creating http server-------------------
// to create http server , createServer() method is used.

 let http = require('http');
 let server = http.createServer((req,res)=>{
    console.log(req);  //since we didnt give any response the page  keeps on loading(no error occurs)
    process.exit(); //used to end the process (stops loading) 
 });
 server.listen(8000); //when this port gets accessed, the function will be executed.

//--------------------Creating http server and providing response for request------

server = http.createServer((req,res)=>{
    res.setHeader('content-type','text/html'); //sets the value of the HTTP header for the curent response
    res.write('<html><body><h1>WELCOME</h1></body></html>');  //Displaying content can be given here . we can also give as res.write('welcome');
    res.end(); //ends the response process. if we didnt give end, the page content will be displayed but keeps on loading.
})

//Note : after successful response , the status code of the response page will be '200 OK'.


//-------------------Sending response for particular URL---------------
// Note : to take the requested url , we can use req.url  method 

server = http.createServer((req,res)=>{
    const url = req.url;
    if(url=='/') //when client request this url page , the following response will be given back.
    {
        res.write('hello');
        res.end();
    }
    if(url=='/msg') //when client request this url page , the following response will be given back.
    {
        res.write('message url');
        res.end();
    }
})

//-----------------routing request and redirecting------------
//to redirect a request , we use the following syntax:
//                      res.setHeader('Location' , 'url')


server = http.createServer((req,res)=>{
    const url = req.url;
    if(url=='/') //when client request this url page , the following response will be given back.
    {
        res.write('hello');
        res.end();
    }
    if(url=='/msg') //when client request this url page , the following response will be given back.
    {
        res.setHeader('Location' , '/') //redirecting to '/' url
        res.statusCode = 302; ///sinc we are redirecting , we set the status code as 302
        res.end();
    }
})

//Node : the redirected url request info  has the status code 302
//       the status code of the response info will be 200

//-----------------------------------------------------------STREAMS & BUFFERS-------------------------------------------------------

/**
 * STREAMS:
 
 * in node JS , Datas are sent and passed as small chunks. this is called streams

  TYPES OF STREAMS :
 * Readstream - to read the streaming data eg(createReadStream method)
 * write stream - to create the stream of data for writing
 * Duplex streams - to create a stream that is both readable and writable
 * Transform streams - to create a stream that is both readable and writable but data can be modified while reading and writing to the stream
 
 * BUFFERS :

 *Buffer is a temperory memory that a stream takes to hold some data until it is consumed.
 */
//---------------------------------------------Sending html files as response(ReadStream method)------------------------------------------------------

//Html files can be sent using --> fs.stat() method
let fs = require('fs');
 server = http.createServer((req,res)=>{
    const url = req.url;
    if(url=='/') //when client request this url page , the following response will be given back.
    {
        fs.stat('./index.html' , (err,data) =>{
            if(data)
            {
                res.statusCode=200;
                res.setHeader('content-type' , 'text/html');
                res.createReadStream('index.html').pipe(res);
            }
        })
       
    }
})

//------------------------------writestream method---------------------
let fs = require('fs');
let writer=fs.createWriteStream('hello.txt');
writer.write('hello world'); //this data will be written on hello.txt file

//we can also give like this:
 writer = fs.createWriteStream('hello.txt').write('hello world');

//-----------------------------------------------------------EVENT EMITTERS---------------------------------------------------------
//Event emitter is a class which is used to handle and trigger events.
// to use event emitters, include 'events' module.

const EventEmitter = require('events');
const eventEmitter = new EventEmitter(); //object is created for event emitter class.

//main methods of event emitter:
 
// 1. on - used to add a callback function thats going to be executed when the event is triggered

     eventEmitter.on('start',()=>{ //start is not a inbuilt event ,  we are creating a event
        console.log('started');
     })
 //2. emit - used to trigger an event

    eventEmitter.emit('start'); //start event is triggered and hence the following callback will be executed.


//--------------------------------------------Reading data from forms and handling POST requests--------------------------------------
function requestHandler(req,res)
{
    
        const url=req.url;
        const method=req.method;
        //routing requests
        if(url==='/') //this is the index page displaying form 
        {
            res.setHeader('content-type','text/html');
            res.write('<html>');
            res.write('<head><title>hello</title></head>');
            res.write('<body><form action="/message" method="POST"> <input type="text"><input type="submit" value="send"></form></body>');
            res.write('</html>');
            return res.end();
        }
        //when the form is submitted , reading the data . req.on() method binds the data to object. It is a way to express when there is something happening, it executes the function added as a parameter.
        if(url==='/message' && method =='POST') 
        {
            //reading data from response
            const body=[];
            req.on('data',(chunk)=>{  //if data is passed in request, pushes all the data chunks(hex decimal value) in an array
                body.push(chunk)
            })
            req.on('end',()=>{  //when the requests sends the data fully , end event occurs. if end event occurs, concating the array and converting into string
                const parsedBody=Buffer.concat(body).toString();
                console.log(parsedBody); //input values will be displayed.
            })
            //redirecting code
            res.setHeader('Location','/');
            res.statusCode = 302;
            return res.end(); //by giving the return statement the below code will not be executed. the process ends.
        }
        // Note : if we didnt use return statement , below code also gets executed. 
        //if the requested url didnt match the above if condition urls , the below code will be executed.
            res.setHeader('content-type','text/html');
            res.write('<html>');
            res.write('<head><title>hello</title></head>');
            res.write('<body><h1>routing requests</h1></body>');
            res.write('</html>');
            return res.end();
        
    
};


//---------------------------------------------------------------exporting modules----------------------------------------

//to export a user defined functions(module) , use 'module.exports = function'
module.exports = requestHandler;
//to export more than 1 property use module.exports = {func1,func2,....};
//to import , import using obj.property
let imp = require('./foldername');
let func1 = imp.func1();
